//Transposition Cipher- A] Rail fence Techniques/////////
import java.io.*;
 class RailFence
{
public static void main(String [] args)throws Exception
{
String plaintxt,ciphertxt;
System.out.println("RAILFENCE TRANSPOSITION TECHNIQUE FOR ENCRYPTION");
System.out.println("Enter the message to be encrypted\n");
BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
 plaintxt=br.readLine();
int len=plaintxt.length(); String s1="",s2="",temp="";
 for(int i=0;i<len;++i)
{
if(plaintxt.charAt(i)!=' ') temp=temp+plaintxt.charAt(i);
}
for(int i=0;i<temp.length();i++)
{ if(i%2==0)
s1=s1+temp.charAt(i); else
s2=s2+temp.charAt(i);
}
ciphertxt=s1.concat(s2);
System.out.println("The Cipher text is "+ciphertxt);
}
}
//Transposition Cipher- D] Vernam Cipher//////////
import java.io.*;
import java.io.BufferedReader.*;
 import java.util.*;
class vernam
{
static String alphabet="abcdefghijklmnopqrstuvwxyz ";
 public static int getindex(char s)
{
int index=0;
for(int i=0;i<27;i++)
 if(alphabet.charAt(i)==s)
  index=i;
return index;
}
public static void main(String[] args) throws IOException
{
String plaintxt,key,ciphertxt="",temp="";
BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
 System.out.println("VERNAM TRANSPOSITION TECHNIQUE FOR ENCRYPTION");
System.out.println("Enter the message to be encrypted\n");
 plaintxt=br.readLine();
for(int i=0;i<plaintxt.length();i++)
{
if(plaintxt.charAt(i)!=' ')
 temp+=plaintxt.charAt(i);
}
int length=temp.length();
System.out.println("Temporary variable is " +temp+ "length of temp variable is "+length);
 System.out.println("Enter the key to be used for the encryption of length " +length+ " characters : ");
key=br.readLine();
 int a,b,index;
for(int i=0;i<length;i++)
{
a=getindex(temp.charAt(i));
 b=getindex(key.charAt(i));
  index=(a+b)%27;
ciphertxt=ciphertxt+alphabet.charAt(index);
}
System.out.println("The Cipher text is "+ciphertxt);
 System.out.println("\nDo you want to Decrypt the cipher text : YES/No");
  String choice=br.readLine();
plaintxt=""; 
if(choice.equalsIgnoreCase("yes")==true)
{
for(int i=0;i<length;i++)
{
a=getindex(ciphertxt.charAt(i));
 b=getindex(key.charAt(i));
index=a-b;
if(index<0) index=27+index;
else
index=index%27;
plaintxt=plaintxt+alphabet.charAt(index);
}
System.out.println("The Decrypted message is "+plaintxt);
}
else System.exit(0);
}
}
//RSA() Algorithm///////////////////////
import java.io.*;
import java.util.*;
import java.math.*;
public class RSAEncDec
{
public static void main(String [] args) throws IOException
{
BigInteger p=new BigInteger("7");
BigInteger q=new BigInteger("17");
BigInteger n=p.multiply(q);
BigInteger p1=p.subtract(new BigInteger("1")); //(p-1) 
BigInteger q1=q.subtract(new BigInteger("1")); //(q-1) 
BigInteger phin=p1.multiply(q1);
int b=5;
int a=77;
Scanner input = new Scanner(System.in);
BigInteger x=input.nextBigInteger();
BigInteger ek=x.pow(b);
ek=ek.mod(n); System.out.println("Encryption : "+ ek);
BigInteger dk=ek.pow(a); 
dk=dk.mod(n);
System.out.println("decryption : "+ dk);
}
} 
/////////////HMAC////////
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SignatureException;
import java.util.Formatter;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;


public class HmacSha1Signature {
	private static final String HMAC_SHA1_ALGORITHM = "HmacSHA1";

	private static String toHexString(byte[] bytes) {
		Formatter formatter = new Formatter();
		
		for (byte b : bytes) {
			formatter.format("%02x", b);
		}

		return formatter.toString();
	}

	public static String calculateRFC2104HMAC(String data, String key)
		throws SignatureException, NoSuchAlgorithmException, InvalidKeyException
	{
		SecretKeySpec signingKey = new SecretKeySpec(key.getBytes(), HMAC_SHA1_ALGORITHM);
		Mac mac = Mac.getInstance(HMAC_SHA1_ALGORITHM);
		mac.init(signingKey);
		return toHexString(mac.doFinal(data.getBytes()));
	}

	public static void main(String[] args) throws Exception {
		String hmac = calculateRFC2104HMAC("data", "key");

		System.out.println(hmac);
		assert hmac.equals("104152c5bfdca07bc633eebd46199f0255c9f49d");
	}
}
/////////////////MD5////////////////
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
public class MD5Hash {
	public static void main(String[] args) {
		System.out.println("For null " + md5(""));
		System.out.println("For simple text "+ md5("This is my text"));
		System.out.println("For simple numbers " + md5("12345"));
	}
	public static String md5(String input) {
		String md5 = null;
		if(null == input) return null;
		try {
			//Create MessageDigest object for MD5
			MessageDigest digest = MessageDigest.getInstance("MD5");
			//Update input string in message digest
			digest.update(input.getBytes(), 0, input.length());
			//Converts message digest value in base 16 (hex) 
			md5 = new BigInteger(1, digest.digest()).toString(16);
		}
		catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
		return md5;
	}
}
//////////////////Substitutions Cipher- A] Caesar Cipher//////////////
import java.io.BufferedReader;
 import java.io.IOException;
import java.io.InputStreamReader;
 import java.lang.*;
class caesarcipher
{
public String encrypt(String plaintext,int shiftkey)
{
String alphabet="abcdefghijklmnopqrstuvwxyz";
 plaintext=plaintext.toLowerCase();
String ciphertext=""; char replaceval;
for(int i=0;i<plaintext.length();i++)
{
if(plaintext.charAt(i)=='i') replaceval='i';
else
{
int charposition=alphabet.indexOf(plaintext.charAt(i));
 int keyval=(shiftkey+charposition)%26; replaceval=alphabet.charAt(keyval);
}
ciphertext += replaceval;
}
return ciphertext;
}
public String decrypt(String ciphertext,int shiftkey)
{
String alphabet="abcdefghijklmnopqrstuvwxyz";
 ciphertext=ciphertext.toLowerCase();
String plaintext=""; char replaceval;
for(int i=0;i<ciphertext.length();i++)
{
if(ciphertext.charAt(i)=='j') replaceval=('j');
else
{
int charposition=alphabet.indexOf(ciphertext.charAt(i)); int shiftkey1 = 0;
int keyval=(charposition-shiftkey)%26; if(keyval<0)
{
keyval=alphabet.length()+keyval;
}
replaceval=alphabet.charAt(keyval);
}
plaintext += replaceval;
 
 
}
return plaintext;
}
}
class Caesarciphertech
{
public static void main(String args[])throws IOException
{
String plaintext; int shiftkey=3;
System.out.println("Enter plaintext:");
BufferedReader br=new BufferedReader(new InputStreamReader(System.in)); plaintext=br.readLine();
caesarcipher cc=new caesarcipher();
String ciphertext=cc.encrypt(plaintext,shiftkey);
 System.out.println("Your cipher text:"+ciphertext);
 String getplaintext=cc.decrypt(ciphertext,shiftkey);
  System.out.println("Your plain text:"+getplaintext);
}
}
////////////Substitutions Cipher- B] Modified Caesar Cipher///////////
import java.io.BufferedReader;
 import java.io.IOException;
  import java.io.InputStreamReader;
   class caesarcipher
{

public String encrypt(String plaintext,int shiftkey)

{

String alphabet="abcdefghijklmnopqrstuvwxyz";
 plaintext=plaintext.toLowerCase();
String ciphertext="";
 char replaceval;
for(int i=0;i<plaintext.length();i++)

{

if(plaintext.charAt(i)=='i') replaceval='i';
else

{

int charposition=alphabet.indexOf(plaintext.charAt(i));
 int keyval=(shiftkey+charposition)%26;
  replaceval=alphabet.charAt(keyval);
}

ciphertext += replaceval;

}

return ciphertext;
}

public String decrypt(String ciphertext,int shiftkey)

{

String alphabet="abcdefghijklmnopqrstuvwxyz";
 ciphertext=ciphertext.toLowerCase();
String plaintext="";
 char replaceval;
for(int i=0;i<ciphertext.length();
i++)

{

if(ciphertext.charAt(i)=='j') replaceval=('j');
else

{

int charposition=alphabet.indexOf(ciphertext.charAt(i));
 int shiftkey1 = 0;
int keyval=(charposition-shiftkey)%26;
 if(keyval<0)
{

keyval=alphabet.length()+keyval;

}

replaceval=alphabet.charAt(keyval);

}

plaintext += replaceval;

}

return plaintext;

}

}

class MDCaesarciphertech
{

public static void main(String[] args) throws IOException { String plaintext;
int shiftkey; System.out.print("Enter plaintext:");
BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
 plaintext=br.readLine();
System.out.println("enter key size :");
 shiftkey=Integer.parseInt(br.readLine());
  caesarcipher cc=new caesarcipher();
String ciphertext=cc.encrypt(plaintext,shiftkey);
 System.out.println("Your Cipher Text:"+ciphertext);
  String getplaintext=cc.decrypt(ciphertext,shiftkey);
   System.out.println("your plain text :"+getplaintext);
}

}
//////////Substitutions Cipher- C] Mono-Alphabet Cipher////////////////
import java.io.BufferedReader;
 import java.io.IOException;
  import java.io.InputStreamReader;
   import java.io.*;
class Mono_alpha
{
public static void main(String[] args) throws IOException
{

BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
 char[] key1=
{'X','N','Y','A','H','P','O','G','Z','Q','W','B','T','S','F','L','R','C','V','M','U','E','K','J','D','I'};
String ciphertext="";
 System.out.print("Enter plaintext :");
  String plaintext=br.readLine();
   plaintext=plaintext.toLowerCase();
    for(int i=0; i<plaintext.length();
     i++)
{
int asci_plaintext=plaintext.charAt(i);
 asci_plaintext=asci_plaintext-97;
  char c=key1[asci_plaintext];
   ciphertext+=c;
}
System.out.println("Ciphertext is :"+ciphertext);
char[] key2=
{'d','l','r','y','v','o','h','e','z','x','w','p','t','b','g','f','j','q','n','m','u','s','k','a','c','i'};
plaintext="";
for(int i=0;
 i<ciphertext.length();
  i++)
{
int ascii_ciphertext=ciphertext.charAt(i);
 ascii_ciphertext=ascii_ciphertext-65;
  char c=key2[ascii_ciphertext];
   plaintext+=c;
}
System.out.println("Plaintext is="+plaintext);
}
}
//////////////Substitutions Cipher- D] Polyalphabetic Cipher//////////
import java.util.*;
 import java.io.*;
public class Polyalphabetic
{
public static void main(String args[])
{
Scanner in=new Scanner(System.in);
 String p=" ",C=" ",K=" ";
String l="abcdefghijklmnopqrstuvwxyz";
 System.out.println("\nEnter the plain text:"); p=in.nextLine();
System.out.println("\nEnter the key:");
 K=in.nextLine();

int Ky=K.length(); int pln=p.length();

String y=K;
int m=pln%Ky;

for(int i=1;i<pln/Ky;i++)
{
K=K+y;
}
K=K+K.substring(0,m); for(int j=1;j<pln;j++)
{
C=C+l.charAt((l.indexOf(K.charAt(j))+l.indexOf(p.charAt(j)))%26);
}
C=C.toUpperCase(); System.out.println("CipherText:"+C); C=C.toLowerCase();
String pl=" ";
for(int r=0;r<pln;r++)
{
pl=pl+l.charAt(((l.indexOf(C.charAt(r))-l.indexOf(K.charAt(r)))+26)%26);
}
System.out.println("Decipher text:"+p);
}
}
///////Transposition Cipher- B] Simple Columnar/////////
import java.io.*;
 import java.math.*;
  import java.lang.*;
   class simcolum
{
public static void main(String [] args) throws IOException
{
String plaintext,ciphertext="",temp="";
BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
 int i=0,j=0;
System.out.print("Enter plain text:");
 plaintext=br.readLine();
int plen=plaintext.length();
 for(i=0;i<plen;++i)
{
if(plaintext.charAt(i)!=' ') temp+=plaintext.charAt(i);
}
System.out.println("temp= "+temp);
 int len=temp.length();
System.out.print("Enter no. of columns(max."+len+"):");
 int cols=Integer.parseInt(br.readLine());
if(cols<=len)
{
int rows=1,k=0; if(len%cols==0) rows=len/cols; else rows=(len/cols)+1;
char matrix[][]=new char[rows][cols];
 for(i=0;i<rows;i++)
{
for(j=0;(j<cols)&&(k<len);++j)
{
matrix[i][j]=temp.charAt(k);
 k++;
}
}
i--;
for(;j<cols;j++) matrix[i][j]='$';
 for(i=0;i<rows;i++)
{
for(j=0;j<cols;++j)
{
System.out.print(matrix[i][j]+"");
}
System.out.println();
}
System.out.println();
int enCol[]=new int[cols];
 for(i=0;i<cols;++i)
{
System.out.print("Enter column no."+(i+1)+":");
 enCol[i]=Integer.parseInt(br.readLine())-1;
}
if(enCol.length==cols)
{
for(i=0;i<cols;++i)
{
for(j=0;j<cols;++j)
{
ciphertext+=matrix[j][enCol[i]];
}
}
}
System.out.println("Ciphertext:"+ciphertext); temp="";
for(i=0;i<ciphertext.length();++i) if(ciphertext.charAt(i)!='$') temp+=ciphertext.charAt(i); ciphertext=temp;
System.out.println("Ciphertext : "+ciphertext);
}
else
System.out.println("Incorrect no. of columns");
}
}
/////////Transposition Cipher- C] Multi-Columnar/////////
import java.io.*;
 import java.lang.*;
  import java.math.*;
   class multicolum
{
public static void main(String[] args) throws IOException
{
String plaintext, ciphertext=" ", temp=" ", choice=" ";
BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
 int i=0,j=0;
System.out.print("enter plaintext:");
 plaintext=br.readLine();
int plen=plaintext.length();
 for(i=0;i<plen;++i)
{
if(plaintext.charAt(i)!=' ') temp+=plaintext.charAt(i);
}
System.out.println("temp ="+temp);
 int len=temp.length();
System.out.print("enter no of column (max."+len+"):");
 int cols=Integer.parseInt(br.readLine());
if(cols<=len)
{
int rows=1,k=0;
 if(len%cols==0) rows=len/cols;
  else rows=(len/cols)+1;
   do
{
ciphertext=" ";
char matrix[ ][ ]=new char[rows][cols];
 for(i=0;i<rows;++i)
{
for(j=0;(j<cols)&&(k<len);
++j)
{
matrix [i][j]=temp.charAt(k);
 k++;
}
}
i--;
for(;j<cols;++j)
matrix[i][j]='$';
System.out.println("\n column matrix :");
 for(i=0;i<rows;i++)
{
for(j=0;j<cols;++j)

{
System.out.print(matrix [i] [j]+ "");
}
}
System.out.println();
int enCol[]=new int[cols]; 
for(i=0;
i<cols;
++i)
{
System.out.print("enter column no."+(i+1)+": ");
 enCol [i]=Integer.parseInt(br.readLine())-1;
}
if(enCol.length==cols)
{
for(i=0;i<cols;++i)
{
for(j=0;j<rows;++j)
{
ciphertext+=matrix[j][enCol[i]];
}
}
}
temp="";
 for(i=0;
 i<ciphertext.length();
 ++i) if(ciphertext.charAt(i) !='$') temp+=ciphertext.charAt(i);
  ciphertext=temp;
System.out.println( "ciphertext:"+ciphertext);
 k=0;
System.out.println("do you want to continue (yes/no):");
 choice=br.readLine();
}
while(choice.equalsIgnoreCase("yes")==true);
}
else
System.out.println("Incorrect no.of column !!!");
}
}
/////////Diffie-Helman Key Exchange Algorithm////////
import java.io.*; import java.lang.*; class Diffiehellman
{

public static void main(String[] agrs) throws IOException

{

int n,g,x,y,a,b;

BufferedReader br=new BufferedReader(new InputStreamReader(System.in)); System.out.print("enter a prime no.(n):");
n=Integer.parseInt(br.readLine()); int counter_n=0,counter_g=0; for(int i=1;i<=n;i++)
{

if (n%i==0) counter_n++;
}

if (counter_n>2)

{

System.out.print(n+" is not a prime no."); System.exit(1);
}

System.out.print("enter another prime no .(g)"); g=Integer.parseInt(br.readLine());
for(int i=1;i<=g;i++)
if(g%i==0) counter_g++;
}

if(counter_g>2)

{

System.out.print(g+" is not a prime no."); System.exit(1);
}

int m=g;

System.out.print("enter a no.(x):"); x=Integer.parseInt(br.readLine()); System.out.print("enter a no.(y):"); y=Integer.parseInt(br.readLine()); for(int i=2;i<=x;++i)
g=g*m; a=g%n; g=m;
for(int i=2;i<=y;++i) g=g*m;
b=g%n; System.out.println(g); m=b;
for(int i=2;i<=x;++i) b=b*m;
int k1=b%n; m=a;
for(int i=2;i<=y;++i) a=a*m;
int k2=a%n; System.out.println("k1= "+k1); System.out.println("k2= "+k2); if(k1==k2)
System.out.println(k1+"is the shared symmetric key");

}

}
///////DES() Algorithm/////////////
import javax.crypto.*; import java.io.*;
import java.security.InvalidAlgorithmParameterException; import java.security.spec.*;
//import java.crypto.spec.IvParameterSpec; import java.lang.*;
import java.security.*; public class DesEncrypter
{

Cipher ecipher; Cipher dcipher;
DesEncrypter(SecretKey key)

{

try

{

ecipher=Cipher.getInstance("Des"); dcipher=Cipher.getInstance("Des"); ecipher.init(Cipher.ENCRYPT_MODE, key); dcipher.init(Cipher.DECRYPT_MODE, key);
}

catch(javax.crypto.NoSuchPaddingException e)

{

}

catch(java.security.NoSuchAlgorithmException e)
{

}

catch(java.security.InvalidKeyException e)

{

}

}

public String encrypt(String str)

{

try

{

byte[] utf8=str.getBytes("UTF8"); byte[] enc=ecipher.doFinal(utf8);
return new sun.misc.BASE64Encoder().encode(enc);

}

catch(javax.crypto.BadPaddingException e)

{

}

catch(IllegalBlockSizeException e)

{

}

catch(UnsupportedEncodingException e)

{

}

catch(java.io.IOException e)

{

}

return null;

}
public String decrypt(String str)

{

try

{

byte[] dec=new sun.misc.BASE64Decoder().decodeBuffer(str); byte[] utf8=dcipher.doFinal(dec);
return new String(utf8,"UTF8");

}

catch(javax.crypto.BadPaddingException e){} catch(IllegalBlockSizeException e){} catch(UnsupportedEncodingException e){} catch(java.io.IOException e){}
return null;

}

public static void main(String args[])

{

System.out.println();

System.out.println("	Encrypting String Using DES 	
 	");

System.out.println(); try
{

SecretKey key=KeyGenerator.getInstance("DES").generateKey(); DesEncrypter encrypter=new DesEncrypter(key);
String s="Don't tell anybody"; String d="Hello";
String encrypted=encrypter.encrypt(s);

String decrypted=encrypter.decrypt(encrypted); System.out.println("Original String is:"+s);
System.out.println("Encrypted String is:"+encrypted); System.out.println("Decrypted String is :"+decrypted);
}

catch(Exception e){}

}

}
///////////AES() Algorithm/////////
import java.security.*; import javax.crypto.*; import java.io.*; public class AES
{
Cipher ecipher; Cipher dcipher; AES(SecretKey key)
{
try
{
ecipher = Cipher.getInstance("AES"); dcipher = Cipher.getInstance("AES"); ecipher.init(Cipher.ENCRYPT_MODE, key); dcipher.init(Cipher.DECRYPT_MODE, key);
}
catch(Exception e)
{
}
}
public String encrypt(String str)
{
try
{
byte[] utf8 = str.getBytes("UTF8"); byte[] enc = ecipher.doFinal(utf8);
return new sun.misc.BASE64Encoder().encode(enc);
}
catch(Exception e)
{
}
return null;
}
public String decrypt(String str)
{
try
{
byte[] dec = new sun.misc.BASE64Decoder().decodeBuffer(str); byte[] utf8 = dcipher.doFinal(dec);
return new String(utf8,"UTF8");
}
catch(Exception e)
{
}
return null;
}
public static void main(String args[])
{
SecretKey key = null; try
{
KeyGenerator keyGen = KeyGenerator.getInstance("AES"); key = keyGen.generateKey();
}
catch (Exception e)
{
e.printStackTrace();
}
AES a = new AES (key); String msg = "hello world"; String en = a.encrypt(msg); String de = a.decrypt(en);
System.out.println("Original Text:"+msg); System.out.println("Encrypted Text:"+en); System.out.println("Decrypted Text:"+de);
}
} 
//////////rc4//////////////////////
import java.io.BufferedReader; import java.io.IOException;
import java.io.InputStreamReader; import java.util.Arrays;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator; import javax.crypto.SecretKey; import javax.swing.JOptionPane; public class rc4
{
public static void main(String args[])throws Exception
{
KeyGenerator keygen = KeyGenerator.getInstance("RC4"); SecretKey secretkey = keygen.generateKey();
Cipher cip = Cipher.getInstance("RC4"); cip.init(Cipher.ENCRYPT_MODE,secretkey);
String inputText = JOptionPane.showInputDialog("Give Input"); byte[] encrypted = cip.doFinal(inputText.getBytes()); cip.init(Cipher.DECRYPT_MODE,secretkey);
byte[] decrypted = cip.doFinal(encrypted); JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),"encrypted:"+new String(encrypted)+"\n"+"decrypted:"+new String(decrypted));
}
} 
